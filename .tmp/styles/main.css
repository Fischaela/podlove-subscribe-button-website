@charset "UTF-8";
/* http://meyerweb.com/eric/tools/css/reset/
   v2.0 | 20110126
   License: none (public domain)
*/
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block;
}

body {
  line-height: 1;
}

ol, ul {
  list-style: none;
}

blockquote, q {
  quotes: none;
}

blockquote:before, blockquote:after,
q:before, q:after {
  content: '';
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

/*------------------------------------*    $CSSWIZARDRY-GRIDS
\*------------------------------------*/
/**
 * CONTENTS
 * INTRODUCTION.........How the grid system works.
 * VARIABLES............Your settings.
 * MIXINS...............Library mixins.
 * GRID SETUP...........Build the grid structure.
 * WIDTHS...............Build our responsive widths around our breakpoints.
 * PUSH.................Push classes.
 * PULL.................Pull classes.
 */
/*------------------------------------*    $INTRODUCTION
\*------------------------------------*/
/**
 * csswizardry grids provides you with widths to suit a number of breakpoints
 * designed around devices of a size you specify. Out of the box, csswizardry
 * grids caters to the following types of device:
 *
 * palm     --  palm-based devices, like phones and small tablets
 * lap      --  lap-based devices, like iPads or laptops
 * portable --  all of the above
 * desk     --  stationary devices, like desktop computers
 * regular  --  any/all types of device
 *
 * These namespaces are then used in the library to give you the ability to
 * manipulate your layouts based around them, for example:
 *
   <div class="grid__item  one-whole  lap--one-half  desk--one-third">
 *
 * This would give you a grid item which is 100% width unless it is on a lap
 * device, at which point it become 50% wide, or it is on a desktop device, at
 * which point it becomes 33.333% width.
 *
 * csswizardry grids also has push and pull classes which allow you to nudge
 * grid items left and right by a defined amount. These follow the same naming
 * convention as above, but are prepended by either `push--` or `pull--`, for
 * example:
 *
   `class="grid__item  one-half  push--one-half"`
 *
 * This would give you a grid item which is 50% width and pushed over to the
 * right by 50%.
 *
 * All classes in csswizardry grids follow this patten, so you should fairly
 * quickly be able to piece together any combinations you can imagine, for
 * example:
 *
   `class="grid__item  one-whole  lap--one-half  desk--one-third  push--desk--one-third"`
 *
   `class="grid__item  one-quarter  palm--one-half  push--palm--one-half"`
 *
   `class="grid__item  palm--one-third  desk--five-twelfths"`
 */
/*------------------------------------*    $VARIABLES
\*------------------------------------*/
/**
 * If you are building a non-responsive site but would still like to use
 * csswizardry-grids, set this to ‘false’:
 */
/**
 * Is this build mobile first? Setting to ‘true’ means that all grids will be
 * 100% width if you do not apply a more specific class to them.
 */
/**
 * Set the spacing between your grid items.
 */
/**
 * Would you like Sass’ silent classes, or regular CSS classes?
 */
/**
 * Would you like push and pull classes enabled?
 */
/**
 * Using `inline-block` means that the grid items need their whitespace removing
 * in order for them to work correctly. Set the following to true if you are
 * going to achieve this by manually removing/commenting out any whitespace in
 * your HTML yourself.
 *
 * Setting this to false invokes a hack which cannot always be guaranteed,
 * please see the following for more detail:
 *
 * github.com/csswizardry/csswizardry-grids/commit/744d4b23c9d2b77d605b5991e54a397df72e0688
 * github.com/csswizardry/inuit.css/issues/170#issuecomment-14859371
 */
/**
 * Define your breakpoints. The first value is the prefix that shall be used for
 * your classes (e.g. `.palm--one-half`), the second value is the media query
 * that the breakpoint fires at.
 */
/**
 * Define which namespaced breakpoints you would like to generate for each of
 * widths, push and pull. This is handy if you only need pull on, say, desk, or
 * you only need a new width breakpoint at mobile sizes. It allows you to only
 * compile as much CSS as you need. All are turned on by default, but you can
 * add and remove breakpoints at will.
 *
 * Push and pull shall only be used if `$push` and/or `$pull` and `$responsive`
 * have been set to ‘true’.
 */
/**
 * You do not need to edit anything from this line onward; csswizardry-grids is
 * good to go. Happy griddin’!
 */
/*------------------------------------*    $MIXINS
\*------------------------------------*/
/**
 * These mixins are for the library to use only, you should not need to modify
 * them at all.
 *
 * Enclose a block of code with a media query as named in `$breakpoints`.
 */
/**
 * Drop relative positioning into silent classes which can’t take advantage of
 * the `[class*="push--"]` and `[class*="pull--"]` selectors.
 */
/*------------------------------------*    $GRID SETUP
\*------------------------------------*/
/**
 * 1. Allow the grid system to be used on lists.
 * 2. Remove any margins and paddings that might affect the grid system.
 * 3. Apply a negative `margin-left` to negate the columns’ gutters.
 */
.benefits__list, .features__list, .live__container, .ressources__links {
  list-style: none;
  /* [1] */
  margin: 0;
  /* [2] */
  padding: 0;
  /* [2] */
  margin-left: -20px;
  /* [3] */
  letter-spacing: -0.31em;
}

/* Opera hack */
.opera:-o-prefocus,
.benefits__list,
.features__list,
.live__container,
.ressources__links {
  word-spacing: -0.43em;
}

/**
     * 1. Cause columns to stack side-by-side.
     * 2. Space columns apart.
     * 3. Align columns to the tops of each other.
     * 4. Full-width unless told to behave otherwise.
     * 5. Required to combine fluid widths and fixed gutters.
     */
.benefits__list__item, .features__list__item, .live__input, .ressources__container {
  display: inline-block;
  /* [1] */
  padding-left: 20px;
  /* [2] */
  vertical-align: top;
  /* [3] */
  width: 100%;
  /* [4] */
  /* [5] */
  /* [5] */
  box-sizing: border-box;
  /* [5] */
  letter-spacing: normal;
  word-spacing: normal;
}

/**
 * Reversed grids allow you to structure your source in the opposite order to
 * how your rendered layout will appear. Extends `.grid`.
 */
/**
 * Gutterless grids have all the properties of regular grids, minus any spacing.
 * Extends `.grid`.
 */
/**
 * Align the entire grid to the right. Extends `.grid`.
 */
/**
 * Centered grids align grid items centrally without needing to use push or pull
 * classes. Extends `.grid`.
 */
/**
 * Align grid cells vertically (`.grid--middle` or `.grid--bottom`). Extends
 * `.grid`.
 */
/**
 * Create grids with narrower gutters. Extends `.grid`.
 */
/**
 * Create grids with wider gutters. Extends `.grid`.
 */
/*------------------------------------*    $WIDTHS
\*------------------------------------*/
/**
 * Create our width classes, prefixed by the specified namespace.
 */
/**
 * Our regular, non-responsive width classes.
 */
/**
     * Whole
     */
/**
     * Halves
     */
.features__list__item, .ressources__container {
  width: 50%;
}

/**
     * Thirds
     */
/**
     * Quarters
     */
.live__input {
  width: 25%;
}

/**
     * Fifths
     */
/**
     * Sixths
     */
/**
     * Eighths
     */
/**
     * Tenths
     */
/**
     * Twelfths
     */
/**
 * Our responsive classes, if we have enabled them.
 */
@media only screen and (min-width: 480px) and (max-width: 759px) {
  /**
     * Whole
     */
  /**
     * Halves
     */
  /**
     * Thirds
     */
  /**
     * Quarters
     */
  /**
     * Fifths
     */
  /**
     * Sixths
     */
  /**
     * Eighths
     */
  /**
     * Tenths
     */
  /**
     * Twelfths
     */
}

@media only screen and (min-width: 760px) and (max-width: 959px) {
  /**
     * Whole
     */
  /**
     * Halves
     */
  /**
     * Thirds
     */
  .benefits__list__item {
    width: 33.333%;
  }
  /**
     * Quarters
     */
  /**
     * Fifths
     */
  /**
     * Sixths
     */
  /**
     * Eighths
     */
  /**
     * Tenths
     */
  /**
     * Twelfths
     */
}

@media only screen and (min-width: 960px) and (max-width: 1199px) {
  /**
     * Whole
     */
  /**
     * Halves
     */
  /**
     * Thirds
     */
  .benefits__list__item {
    width: 33.333%;
  }
  /**
     * Quarters
     */
  /**
     * Fifths
     */
  /**
     * Sixths
     */
  /**
     * Eighths
     */
  /**
     * Tenths
     */
  /**
     * Twelfths
     */
}

@media only screen and (min-width: 1200px) {
  /**
     * Whole
     */
  /**
     * Halves
     */
  /**
     * Thirds
     */
  .benefits__list__item {
    width: 33.333%;
  }
  /**
     * Quarters
     */
  /**
     * Fifths
     */
  /**
     * Sixths
     */
  /**
     * Eighths
     */
  /**
     * Tenths
     */
  /**
     * Twelfths
     */
}

/*------------------------------------*    $PUSH
\*------------------------------------*/
/**
 * Push classes, to move grid items over to the right by certain amounts.
 */
/**
     * Not a particularly great selector, but the DRYest way to do things.
     */
[class*="push--"] {
  position: relative;
}

/**
     * Whole
     */
/**
     * Halves
     */
/**
     * Thirds
     */
/**
     * Quarters
     */
/**
     * Fifths
     */
/**
     * Sixths
     */
/**
     * Eighths
     */
/**
     * Tenths
     */
/**
     * Twelfths
     */
@media only screen and (min-width: 480px) and (max-width: 759px) {
  /**
     * Whole
     */
  /**
     * Halves
     */
  /**
     * Thirds
     */
  /**
     * Quarters
     */
  /**
     * Fifths
     */
  /**
     * Sixths
     */
  /**
     * Eighths
     */
  /**
     * Tenths
     */
  /**
     * Twelfths
     */
}

@media only screen and (min-width: 760px) and (max-width: 959px) {
  /**
     * Whole
     */
  /**
     * Halves
     */
  /**
     * Thirds
     */
  /**
     * Quarters
     */
  /**
     * Fifths
     */
  /**
     * Sixths
     */
  /**
     * Eighths
     */
  /**
     * Tenths
     */
  /**
     * Twelfths
     */
}

@media only screen and (min-width: 960px) and (max-width: 1199px) {
  /**
     * Whole
     */
  /**
     * Halves
     */
  /**
     * Thirds
     */
  /**
     * Quarters
     */
  /**
     * Fifths
     */
  /**
     * Sixths
     */
  /**
     * Eighths
     */
  /**
     * Tenths
     */
  /**
     * Twelfths
     */
}

@media only screen and (min-width: 1200px) {
  /**
     * Whole
     */
  /**
     * Halves
     */
  /**
     * Thirds
     */
  /**
     * Quarters
     */
  /**
     * Fifths
     */
  /**
     * Sixths
     */
  /**
     * Eighths
     */
  /**
     * Tenths
     */
  /**
     * Twelfths
     */
}

/*------------------------------------*    $PULL
\*------------------------------------*/
/**
 * Pull classes, to move grid items back to the left by certain amounts.
 */
/**
     * Not a particularly great selector, but the DRYest way to do things.
     */
[class*="pull--"] {
  position: relative;
}

/**
     * Whole
     */
/**
     * Halves
     */
/**
     * Thirds
     */
/**
     * Quarters
     */
/**
     * Fifths
     */
/**
     * Sixths
     */
/**
     * Eighths
     */
/**
     * Tenths
     */
/**
     * Twelfths
     */
@media only screen and (min-width: 480px) and (max-width: 759px) {
  /**
     * Whole
     */
  /**
     * Halves
     */
  /**
     * Thirds
     */
  /**
     * Quarters
     */
  /**
     * Fifths
     */
  /**
     * Sixths
     */
  /**
     * Eighths
     */
  /**
     * Tenths
     */
  /**
     * Twelfths
     */
}

@media only screen and (min-width: 760px) and (max-width: 959px) {
  /**
     * Whole
     */
  /**
     * Halves
     */
  /**
     * Thirds
     */
  /**
     * Quarters
     */
  /**
     * Fifths
     */
  /**
     * Sixths
     */
  /**
     * Eighths
     */
  /**
     * Tenths
     */
  /**
     * Twelfths
     */
}

@media only screen and (min-width: 960px) and (max-width: 1199px) {
  /**
     * Whole
     */
  /**
     * Halves
     */
  /**
     * Thirds
     */
  /**
     * Quarters
     */
  /**
     * Fifths
     */
  /**
     * Sixths
     */
  /**
     * Eighths
     */
  /**
     * Tenths
     */
  /**
     * Twelfths
     */
}

@media only screen and (min-width: 1200px) {
  /**
     * Whole
     */
  /**
     * Halves
     */
  /**
     * Thirds
     */
  /**
     * Quarters
     */
  /**
     * Fifths
     */
  /**
     * Sixths
     */
  /**
     * Eighths
     */
  /**
     * Tenths
     */
  /**
     * Twelfths
     */
}

* {
  box-sizing: border-box;
}

a {
  color: #000000;
  text-decoration: none;
}

a:active, a:focus,
button:active,
button:focus,
input:active,
input:focus,
textarea:active,
textarea:focus {
  outline: none;
}

html,
body {
  margin: 0;
  padding: 0;
  overflow-y: auto;
  overflow-x: hidden;
}

button:active, button:focus,
input:active,
input:focus,
textarea:active,
textarea:focus {
  outline-color: #36AE7F;
  outline-offset: 2px;
  outline-style: solid;
  outline-width: 2px;
}

@font-face {
  font-family: 'Podlove';
  src: url("../fonts/podlove/Podlove.eot");
  src: url("../fonts/podlove/Podlove.eot?#iefix") format("embedded-opentype"), url("../fonts/podlove/Podlove.woff") format("woff"), url("../fonts/podlove/Podlove.ttf") format("truetype"), url("../fonts/podlove/Podlove.svg#podlove") format("svg");
  font-weight: 300;
  font-style: normal;
}

@font-face {
  font-family: 'Roboto';
  src: url("../fonts/roboto_light/Roboto-Light-webfont.eot");
  src: url("../fonts/roboto_light/Roboto-Light-webfont.eot?#iefix") format("embedded-opentype"), url("../fonts/roboto_light/Roboto-Light-webfont.woff2") format("woff2"), url("../fonts/roboto_light/Roboto-Light-webfont.woff") format("woff"), url("../fonts/roboto_light/Roboto-Light-webfont.ttf") format("truetype"), url("../fonts/roboto_light/Roboto-Light-webfont.svg#robotolight") format("svg");
  font-weight: 300;
  font-style: normal;
}

@font-face {
  font-family: 'Roboto';
  src: url("../fonts/roboto_medium/Roboto-Medium-webfont.eot");
  src: url("../fonts/roboto_medium/Roboto-Medium-webfont.eot?#iefix") format("embedded-opentype"), url("../fonts/roboto_medium/Roboto-Medium-webfont.woff2") format("woff2"), url("../fonts/roboto_medium/Roboto-Medium-webfont.woff") format("woff"), url("../fonts/roboto_medium/Roboto-Medium-webfont.ttf") format("truetype"), url("../fonts/roboto_medium/Roboto-Medium-webfont.svg#robotomedium") format("svg");
  font-weight: 500;
  font-style: normal;
}

/* 1.2 */
/* 1.44 */
/* 1.728 */
/* 2.074 */
/* 2.488 */
/* 2.986 */
/* 3.583 */
/* 4.2996 */
/* 5.15952 */
body {
  font-family: 'Roboto', sans-serif;
  font-size: 0.875em;
  font-weight: 300;
  line-height: 1.44;
}

@media (min-width: 760px) {
  body {
    font-size: 16.8px;
  }
}

a {
  color: inherit;
  text-decoration: underline;
}

a:active, a:hover {
  color: #36AE7F;
}

.typo-bold {
  font-weight: 500;
}

.typo-light {
  font-weight: 300;
}

.headline {
  font-weight: 500;
}

.headline--5 {
  font-size: 1.05em;
}

@media (min-width: 960px) {
  .headline--5 {
    font-size: 1.26em;
  }
}

@media (min-width: 1200px) {
  .headline--5 {
    font-size: 1.512em;
  }
}

.headline--4 {
  font-size: 1.05em;
}

@media (min-width: 760px) {
  .headline--4 {
    font-size: 1.26em;
  }
}

@media (min-width: 960px) {
  .headline--4 {
    font-size: 1.512em;
  }
}

@media (min-width: 1200px) {
  .headline--4 {
    font-size: 1.8144em;
  }
}

.headline--3 {
  font-size: 1.26em;
}

@media (min-width: 760px) {
  .headline--3 {
    font-size: 1.512em;
  }
}

@media (min-width: 960px) {
  .headline--3 {
    font-size: 1.8144em;
  }
}

@media (min-width: 1200px) {
  .headline--3 {
    font-size: 2.17728em;
  }
}

.headline--2 {
  font-size: 1.512em;
  text-align: center;
  margin-bottom: 40px;
}

@media (min-width: 760px) {
  .headline--2 {
    font-size: 1.8144em;
  }
}

@media (min-width: 960px) {
  .headline--2 {
    font-size: 2.17728em;
  }
}

@media (min-width: 1200px) {
  .headline--2 {
    font-size: 2.612736em;
  }
}

.headline--1 {
  font-size: 1.8144em;
}

@media (min-width: 760px) {
  .headline--1 {
    font-size: 2.17728em;
  }
}

@media (min-width: 960px) {
  .headline--1 {
    font-size: 2.612736em;
  }
}

@media (min-width: 1200px) {
  .headline--1 {
    font-size: 3.1352832em;
  }
}

.benefits {
  margin: 0 auto;
  padding-top: 80px;
  max-width: 900px;
}

.benefits__headline {
  margin-bottom: 10px;
}

.features {
  margin: 0 auto;
  padding-top: 80px;
  max-width: 800px;
}

.features__list {
  margin-bottom: 80px;
}

.features__list__item {
  margin-bottom: 40px;
}

.features__figure__image {
  margin-bottom: 10px;
  width: 100%;
}

.hero {
  color: #FFFFFF;
  text-align: center;
  position: relative;
}

.hero__background {
  background-color: #36AE7F;
  background-image: url("../images/hero.gif");
  background-repeat: no-repeat;
  background-size: cover;
  position: relative;
  overflow: auto;
  width: 100%;
  height: 62.5vh;
  min-height: 300px;
}

.hero__background::after {
  background-color: #1C5558;
  content: '';
  display: block;
  opacity: 0.6;
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
}

.hero__headline {
  text-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23);
  line-height: 1em;
  position: absolute;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%, -50%);
          transform: translate(-50%, -50%);
}

.live {
  margin: 0 auto;
  padding-top: 80px;
  max-width: 800px;
}

.live__button {
  text-align: center;
  margin: 80px auto;
  width: 200px;
  height: 240px;
}

.live__label {
  font-weight: 900;
  margin-bottom: 20px;
}

.ressources {
  color: #EFEFEF;
  background-color: #121212;
  padding: 120px 0;
}

.ressources__container:nth-child(2) {
  text-align: right;
}

.ressources__list__item {
  padding: 5px 0;
}

.ressources__wrapper {
  margin: 0 auto;
  max-width: 800px;
}

/*# sourceMappingURL=data:application/json;base64, */
